<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">

<select id="getUserList" resultType="user">
SELECT B.* FROM ( SELECT A.*, ROWNUM RN FROM ( 
	SELECT  USER_ID,
			USER_PW,
			USER_NAME,
			USER_GEN,
			USER_PHONE,
			USER_BIRTH,
			USER_POST,
			USER_ADDRESS,
			USER_EMAIL,
			USER_STAR,
			USER_GRANT,
			USER_ACCOUNT,
			USER_BANK,
			USER_DATE
	  FROM  USERT
	  WHERE USER_ID LIKE '%' || #{searchKeyword} || '%'
	  ORDER BY USER_DATE DESC
) A ) B WHERE RN BETWEEN #{first} AND #{last}
</select>
<select id="getUser" parameterType="user" resultType="user">
	SELECT  USER_ID,
			USER_PW,
			USER_NAME,
			USER_GEN,
			USER_PHONE,
			TO_CHAR(USER_BIRTH, 'YYYY-MM-DD') USER_BIRTH,
			USER_POST,
			USER_ADDRESS,
			USER_EMAIL,
			USER_STAR,
			USER_GRANT,
			USER_ACCOUNT,
			USER_BANK,
			USER_DATE
	  FROM  USERT
	 WHERE  USER_ID = #{userId}
</select>
<select id="getUserCount" resultType="int">
      SELECT COUNT(*)
      FROM USERT
      WHERE 1=1
		    AND USER_ID LIKE '%' || #{searchKeyword} || '%'
      ORDER BY 1
</select>

<select id="getUserEmail" parameterType="user" resultType="user">
	SELECT  USER_EMAIL
	  FROM  USERT
	 WHERE  USER_EMAIL = #{userEmail}
</select>
<select id="getUserEmailList" resultType="String">
	SELECT  USER_EMAIL
	  FROM  USERT
</select>

<insert id="insertUser" parameterType="user">
	INSERT INTO USERT ( USER_ID,
						USER_PW,
						USER_NAME,
						USER_GEN,
						USER_PHONE,
						USER_BIRTH,
						USER_EMAIL
						)
				VALUES ( #{userId},
						 #{userPw},
						 #{userName},
						 #{userGen},
						 #{userPhone},
						 #{userBirth},
						 #{userEmail} )
</insert>
<update id="updateUser" parameterType="user">
	UPDATE USERT SET USER_PW = #{userPw},
					 USER_NAME = #{userName},
					 USER_PHONE = #{userPhone},
					 USER_BIRTH = #{userBirth},
					 USER_EMAIL = #{userEmail}
		<if test="userAddress != null and userAddress != ''">
					 , USER_POST = #{userPost}
					 , USER_ADDRESS = #{userAddress}
		</if>
		<if test="userAccount != null and userAccount != ''">
					 , USER_BANK = #{userBank}
					 , USER_ACCOUNT = #{userAccount}
		</if>
			  WHERE  USER_ID = #{userId}
</update>
<delete id="deleteUser" parameterType="user">
	DELETE  FROM  USERT
			WHERE USER_ID = #{value}
</delete>
<delete id="deleteUserList" parameterType="user">
	DELETE  FROM  USERT
	<if test="userNoList != null and userNoList.length > 0">
		WHERE USER_ID in
	<foreach collection="userNoList" item="item"
			open="(" close=")" separator=",">
		#{item}
	</foreach>
	</if>
	<if test="userNoList == null or not userNoList.length > 0">
		WHERE USER_ID = -1
	</if>
</delete>

<select id="findUserPw" parameterType="user" resultType="user">
	SELECT  USER_PW,
			USER_EMAIL
	  FROM  USERT
	 WHERE  USER_EMAIL = #{userEmail}
</select>
<update id="updateUserPw" parameterType="user">
	UPDATE USERT SET USER_PW = #{userPw}
			   WHERE USER_EMAIL = #{userEmail}
</update>
</mapper>